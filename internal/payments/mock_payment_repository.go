// Code generated by mockery v1.0.0. DO NOT EDIT.

// NOTE: run 'make update-mocks' from payment-api top folder to update this file and generate new ones.

package payments

import context "context"
import mock "github.com/stretchr/testify/mock"
import models "github.com/cedric-parisi/payment-api/internal/models"
import utils "github.com/cedric-parisi/payment-api/pkg/utils"

// MockPaymentRepository is an autogenerated mock type for the PaymentRepository type
type MockPaymentRepository struct {
	mock.Mock
}

// DeletePayment provides a mock function with given fields: ctx, id
func (_m *MockPaymentRepository) DeletePayment(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetFilteredPayments provides a mock function with given fields: ctx, filter
func (_m *MockPaymentRepository) GetFilteredPayments(ctx context.Context, filter *utils.Filter) ([]*models.Payment, int, error) {
	ret := _m.Called(ctx, filter)

	var r0 []*models.Payment
	if rf, ok := ret.Get(0).(func(context.Context, *utils.Filter) []*models.Payment); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.Payment)
		}
	}

	var r1 int
	if rf, ok := ret.Get(1).(func(context.Context, *utils.Filter) int); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Get(1).(int)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, *utils.Filter) error); ok {
		r2 = rf(ctx, filter)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// GetPayment provides a mock function with given fields: ctx, id
func (_m *MockPaymentRepository) GetPayment(ctx context.Context, id string) (*models.Payment, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Payment
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.Payment); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Payment)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertPayment provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) InsertPayment(ctx context.Context, payment *models.Payment) error {
	ret := _m.Called(ctx, payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdatePayment provides a mock function with given fields: ctx, payment
func (_m *MockPaymentRepository) UpdatePayment(ctx context.Context, payment *models.Payment) error {
	ret := _m.Called(ctx, payment)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.Payment) error); ok {
		r0 = rf(ctx, payment)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
